package main

import (
	"fmt"
	"io"
	"log"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"unicode"
)

const header = `// Code generated by genres.go. DO NOT EDIT.

package javaApp


`

func main() {
	if err := os.MkdirAll("gores", os.ModePerm); err != nil {
		log.Fatal(err)
	}

	out, err := os.OpenFile("res.go", os.O_WRONLY|os.O_CREATE|os.O_TRUNC, os.ModePerm)
	if err != nil {
		log.Fatal(err)
	}

	if _, err := out.WriteString(header); err != nil {
		log.Fatal(err)
	}

	if err := genRes("res", out); err != nil {
		log.Fatal(err)
	}
}

const variable = "var %s = []byte{%s}\n"

func genRes(resDirPath string, out io.Writer) error {
	err := filepath.Walk(resDirPath, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		if !info.IsDir() {
			resBytes, err := os.ReadFile(path)
			if err != nil {
				return err
			}

			if _, err := fmt.Fprintf(out, variable, strings.ReplaceAll(filenameToVarName(info.Name()), ".", "_"), joinBytes(resBytes)); err != nil {
				return err
			}

		}

		return nil
	})

	return err
}

func joinBytes(p []byte) string {
	var s string

	if len(p) == 0 {
		return s
	}

	for _, v := range p {
		s += strconv.Itoa(int(v)) + ","
	}

	return s[:len(s)-1]
}

func filenameToVarName(filename string) string {
	filenameRunes := []rune(filename)
	s := make([]rune, 0, len(filenameRunes))

	var nextUpper bool

	for _, v := range filenameRunes {
		if nextUpper {
			s = append(s, unicode.ToUpper(v))
			nextUpper = false
			continue
		}
		switch v {
		case '-', '.', '_':
			nextUpper = true
		default:
			s = append(s, v)
		}
	}

	s[0] = unicode.ToUpper(s[0])
	return string(s)
}
